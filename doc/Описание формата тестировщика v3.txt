Идеи для третей версии формата
  убрать maxCost, minCost, maxPenalty, minPenalty -> заменить на один параметр difficulty (сложность)
  добавить в стиль поле title - заголовок для структуры
  добавить к карточке поле tags список тегов - будут использоваться для фильтрации и управления, для установки связей между карточками
  доавить карточке поле список upTags  - список тегов карточек которые должны быть изучены для начала изучения текущей
  убрать в карточке поле linkList - оно будет заменено на upTags
  порядок обработки карточек должен придерживаться по возможности к порядку следования карточек в файле, 
    т.е. когда выбирается новая для изучения карточка - должна выбираться первая по порядку в файле подходящая по условиям карточка.
  в тело карточки добавить поле title - для отображения в структуре, для текстовых вопросов - не обязательное будет выводится text


подерживаются файлы двух типов имеющие соотв расширения:
".decardj" - текстовый файл в формате utf8 содержащий данные в json формате описанном ниже.

".decardz" - zip архив содержащий один или несколько файдлв с расширением ".decardj" а также медиа файлы
всё это может быть разложено по подкаталогам внутри архива
файл ".decardz" (архив) не может содержат внутри себя другие файлы вида ".decardz"

json файл имеет следующий формат:
{
	"title"         : наименование содержимого файла
	"GUID"          : по нему выполняется поиск одних и техже файлов
	"version"       : целое, версия файла, при накате обновления сравниваюя версии - остаётся более поздняя
	"author"        : автор
	"site"          : сайт
	"email"         : почтовый адрес
	"license"       : лицензия

	"cardStyleList"    : список стилей карточек
        "qualityLevelList" : список уровней качества изучения, используется в card.upLinks
	"templateList"     : список шаблонов для генерации карточек
	"templatesSources" : данные для шаблонов
	"cardList"         : список карточек
}

cardStyle - элемент списка cardStyleList
{
	"id"               : строка, ИД стиля, уникальное в рамках файла, используется для ссылки на стиль из тела карточки
	"maxCost"          : целое, количество зарабатываемых минут в случае правильного ответа
	"minCost"          : целое, количество зарабатываемых минут в случае правильного ответа
	"maxPenalty"       : целое, количество штрафных минут в случае НЕ правильного ответа
	"minPenalty"       : целое, количество штрафных минут в случае НЕ правильного ответа
	"maxTryCount"      : целое, количество попыток решения за один подход
	"maxDuration"      : целое, секунды, время отводимое на решение, default 1
	"minDuration"      : целое, секунды, время отводимое на решение, не обязательное
	"lowDurationPercentСost" : целое, нижнее значение стоимости в процентах от текущей заданной стоимости, default 100
	"dontShowAnswer"   : boolen,default false, НЕ показать в случае не верного ответа
	"answerVariantList"  : список вариантов ответов
	"answerVariantCount" : количество отображаемых вариантов ответов
	"answerVariantListRandomize" : boolean, default false, выводить список в случайном порядке
	"answerVariantMultiSel" : boolean, может/должно быть выбрано несколько ответов (в интерфейсе выбираемые кнопки + кнопка проверить результат "Готово")
	"answerInputMode"  : строка, фиксированый набор значений, см. перечисление ниже cardStyle.answerInputMode
	"widgetKeyboard"   : виртуальная клавиатура: список кнопок на клавиатуре, кнопки могут содержать несколько символов, разделитель кнопок символ "\t" перевод строки "\n"
}

примечание:
max* - используется в начале изучения карточки
min* - в конце изучения карточки
помере удучшения статистики изучения карточки задержка смещается от max к min
для Penalty логика min/max инвертирована
minTryCount - нету, оно подразумевается и всегда равно 1

действующее значение для min/max параметров выполняется расчётом пропорцианоально качеству изучения

cardStyle.answerInputMode определяет интерфейс для ввода ответа, значения:
  "none"   - способ ввода ответа определяет способ задания вопроса (imgqt, app)
  "ddList" - выпадающий список
  "vList"  - вертикальный список из вариантов ответа на экране
  "hList"  - горизонтальный список из вариантов ответа на экране
  "input"  - строка ввода
  "inputDigit"  - строка ввода, цифры
  "widgetKeyboard" - виртуальная клавиатура: список кнопок на клавиатуре, кнопки могут содержать несколько символов, разделитель кнопок символ "\t" перевод строки "\n" 

qualityLevel
{
	"qlName"     : наименование уровня
	"minQuality" : минимальное качество
	"avgQuality" : среднее качество
}

template
{
	"templateName" : имя шаблона
	"cardTemplateList" : [один или несколько шаблонов карточек
шаблон карточки пишется ровно также как обычная карточка
только в данных полей могут присутствовать символы <@имя поля source@> эти символы заменяются соотв значение из source]
}

templateSource [
	{"templateName": "<имя шаблона>", "<имя поля шаблона>": "<значение>", ...}
]

card - элемент списка cardList
{
	"id"       : строка, уникальный идентификатор карточки в рамках файла
	"title"    : заголовок
	"group"    : строка, имя группы карточек
        "tags"     : [<tag1>, <tag2>,...] теги карточки,
        "upLinks"  : [<upLink>,...] связаность с карточками которые должны изучаться раньше (предшественники)
	"bodyList" : список тел карточки
}

upLink - элемент списка card.linkList
{
	"qlName": строка, qualityLevel.name
	"tags"  : [] // массив тегов из карточек предшественников
	"cards" : [] // массив card.id
	"groups": [] // массив card.group 
}

cardBody - элемент списка card.bodyList
{
	"styleIdList" : [ не обязательное, список стилей в порядке наложения, порядок указания в массиве ВАЖЕН
		<строка, ссылка на cardStyle.id>,...
	],
	"style" : { не обязательное, локальное описание стиля, добавляется к стилям описанным в styleList
		см. cardStyle
	},
	"questionData" : { структура описывающая данные вопроса
		"text"   : не обязательное, строка, текст вопроса
		"html"   : не обязательное, строка, html с вопросом
		"webURL" : не обязательное, ссылка на ресурс для отображения в браузере
		"audio"  : не обязательное, ссылка на audio ресурс		
		"video"  : не обязательное, ссылка на video ресурс
		"image"  : не обязательное, ссылка на image
		"imgqt"  : не обязательное, json структура см. ниже
		"app"    : не обязательное, json структура см. ниже
	},
	"answerList" : [ список правильных ответов, список вопросов поставляется в итоговом style
		<строка>,...
	],	
}

примечание
body.questionData. все ссылки на ресурсы могут ввеси как на глобальный так и 
на локальный ресурс поставляемый в месте с json-ом, адресация в этом случе
выполняется относительно json файла

imgqt - см. body.questionData.imgqt
описывает вопрос на основе подготовленных картинок
{
	"image" : ссылка на image
	"mask"  : ссылка на image
	"answers" : [ не обязательно
		<ссылка на image>,...
	]
}
пользоваетлю отображается картинка image
для ответа он дожен нажать в определённое место
эти места размечены на картинке mask
картинка mask это копия image, но некоторые места покрашены
  цвет чисто синий   - не правильные места
  цвет чисто зелёный - правильное место

если заполнен массив answers картинки из этого массива позиционируются
в помеченные места, размеры пемеченного места и позиционируемой картинки
не учитываются - просто совмещаются центры того и дргого
центр помеченного места определяется как средне арефмитическое от всех точек входящего в него.
Имя выбранного файла без пути и расширения, используется при проверке ответа

questionDataApp - см. body.questionData.app
будет запущена спец программа - должна быть установлена на устройстве
программа умеет возвращать результат тестирования
{
	"packageName" : имя программы
	"message"     : не обязательное, строка, сообщение передаваемое в программу при запуске
}

=============
интерфейс
отображается информация о бонусе ишрафе 
отображается информация о возможном количстве попыток
отображается изменение бонуса в зависимости от длительности ответа (ползунок ползёт от мксимального значения к минимальному, скорость поллзения зависит от качества изучения карточки и индицируется цветом ползунка)
возможен множественный выбор - т.е. тестируемый должен выбрать несколько ответов
кнопка "Показать ответ" - присутствует всегда (если нет флажка не показывать), при нажатии отображаетс ответ, карточка считается не решённой
кнопка "Следкющая" - переход к следующей карточке, появляется после ввода ответа

выбирается результат
появляется надпись провильно/не правильно (если это была последняя попытка)
правильный ответ (если разрешон показ ответа и это была последняя попытка)
появляется кнопка "Следкющая" (если это была последняя попытка)
если ответ был не правильный но это была не последняя попытка сообщение выводится через toast